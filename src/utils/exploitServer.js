import axios from "axios";
import { parse } from "node-html-parser";

export { ExploitServer };

// creating an instance requires some asynchronous initialization, so we
// prevent its creation directly and define a factory method instead
class ExploitServer {
  static #isInternalConstructing = false;
  #url;
  #httpClient;

  constructor(url, httpClient) {
    if (!ExploitServer.#isInternalConstructing) {
      throw new TypeError(`${ExploitServer.name} is not constructable`);
    }
    ExploitServer.#isInternalConstructing = false;
    this.#url = url;
    this.#httpClient = httpClient;
  }

  storeExploit(body) {
    console.log("storing the exploit on the server...");
    this.#httpClient.request({
      url: this.#url,
      method: "post",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      data: new URLSearchParams({
        urlIsHttps: "on",
        responseFile: "/exploit",
        responseHead:
          "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=utf-8",
        responseBody: body,
        formAction: "STORE",
      }),
    });
  }

  get url() {
    return this.#url;
  }

  static async #getExploitServerLink(labUrl) {
    const { data } = await axios.get(labUrl);
    return parse(data).querySelector("#exploit-link").getAttribute("href");
  }

  static async create(labUrl, httpClient) {
    ExploitServer.#isInternalConstructing = true;
    const url = await ExploitServer.#getExploitServerLink(labUrl);
    return new ExploitServer(url, httpClient);
  }
}
